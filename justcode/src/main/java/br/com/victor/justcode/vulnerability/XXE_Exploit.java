package br.com.victor.justcode.vulnerability;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
/**
 * Classe de teste para execução da vulnerabilidade XXE.
 * @author victor.bello
 *
 */
public class XXE_Exploit {

    private static InputStream getResource(String path) {
        System.out.println("**********************************************");
        return XXE_Exploit.class.getClassLoader().getResourceAsStream(path);
    }

    public static void main(String[] args) throws Exception {
        xmlExploit(getResource("xml/xxe-payload1.xml"));
        xmlExploit(getResource("xml/xxe-payload2.xml"));
        jaxBXML(getResource("xml/xxe-payload1.xml"));
        jaxBXML(getResource("xml/xxe-payload2.xml"));
    }

    private static void xmlExploit(InputStream payload) throws Exception {
        Document document = parseXML(payload);
        pretty(document, System.out, 2);
    }

    static public Document parseXML(InputStream file) throws SAXException, IOException, ParserConfigurationException {
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.parse(file);
        return document;
    }

    private static void pretty(Document document, OutputStream outputStream, int indent) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        if (indent > 0) {
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", Integer.toString(indent));
        }
        Result result = new StreamResult(outputStream);
        Source source = new DOMSource(document);
        transformer.transform(source, result);
    }

    private static void jaxBXML(InputStream payload) throws Exception {
        XMLInputFactory f = XMLInputFactory.newFactory();
        XMLStreamReader sr = f.createXMLStreamReader(payload);

        JAXBContext jaxbContext = JAXBContext.newInstance(Foo.class);
        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
        Foo unmarshal = (Foo) jaxbUnmarshaller.unmarshal(sr);
        System.out.println(unmarshal);
    }

    @XmlRootElement(name = "foo")
    public static class Foo {
        @XmlElement(name = "xxe")
        public String atributo;

        @Override
        public String toString() {
            return "Foo [atributo=" + atributo + "]";
        }

    }

}
